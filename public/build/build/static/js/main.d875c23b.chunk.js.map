{"version":3,"sources":["components/forms/RegistrationForm.js","App.js","serviceWorker.js","index.js"],"names":["Option","RegistrationForm","auto_complete","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","map","domain","inherits","createClass","key","getFieldDecorator","initialValue","react_default","a","createElement","es_select","style","width","es_form","assign","labelCol","xs","span","sm","wrapperCol","onSubmit","Item","label","input","offset","es_button","type","htmlType","React","Component","forms_RegistrationForm","create","name","App","react_router_dom","row","height","justify","align","col","md","lg","xl","react_router","exact","path","component","RegisterForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d875c23b.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete, Divider,\n} from 'antd';\n\nconst { Option } = Select;\nconst AutoCompleteOption = AutoComplete.Option;\n\nexport class RegistrationForm extends React.Component {\n  state = {\n    confirmDirty: false,\n    autoCompleteResult: [],\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n\n  handleConfirmBlur = (e) => {\n    const value = e.target.value;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  }\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  }\n\n  validateToNextPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  }\n\n  handleWebsiteChange = (value) => {\n    let autoCompleteResult;\n    if (!value) {\n      autoCompleteResult = [];\n    } else {\n      autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n    }\n    this.setState({ autoCompleteResult });\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n      },\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0,\n        },\n        sm: {\n          span: 16,\n          offset: 8,\n        },\n      },\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '+1',\n    })(\n      <Select style={{ width: 70 }}>\n        <Option value=\"+1\">+1</Option>\n      </Select>\n    );\n\n    return (\n      <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n        <Form.Item\n          label=\"公司名称(Legal name)\"\n        >\n           Boiling Crab and Crawfish Inc\n        </Form.Item>\n        <Form.Item\n          label=\"公司招牌名字(DBA)\"\n        >\n         Shaking Crab\n        </Form.Item>\n        <Form.Item\n          label=\"公司税号\"\n        >\n          XXXXXXX\n        </Form.Item>\n        <Form.Item\n          label=\"联系信息\"\n        >\n          Eddie(678-XXX-XXXX)\n        </Form.Item>\n        <Form.Item\n          label=\"微信号\"\n        >\n          XXXX\n        </Form.Item>\n        <Form.Item\n          label=\"员工姓名\"\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"工作时长\"\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"工资总额\"\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"小费总额\"\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item {...tailFormItemLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">提交</Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nexport default Form.create({ name: 'register' })(RegistrationForm);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Row, Col } from 'antd';\nimport RegisterForm from './components/forms/RegistrationForm';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Row style={{height: '4vw'}}></Row>\n        <Row  type=\"flex\" justify=\"space-around\" align=\"middle\">\n          <Col xs={2} sm={4} md={4} lg={5} xl={5}></Col>\n          <Col xs={20} sm={16} md={16} lg={14} xl={14}>\n            <Route exact path=\"/\" component={RegisterForm} />\n            <Route exact path=\"/clients\" component={RegisterForm} />\n            <Route exact path=\"/accounting\" component={RegisterForm} />\n          </Col>\n          <Col xs={2} sm={4} md={4} lg={5} xl={5}></Col>\n        </Row>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}